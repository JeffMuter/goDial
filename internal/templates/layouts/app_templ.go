// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "goDial/internal/templates/components"

func App(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\" data-theme=\"dark\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/layouts/app.templ`, Line: 12, Col: 18}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" - goDial</title><link href=\"/static/css/output.css\" rel=\"stylesheet\"><script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script><script src=\"https://unpkg.com/htmx.org@2.0.4\"></script><!-- Live reload script for development --><script>\n        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n            let eventSource;\n            let reconnectAttempts = 0;\n            const maxReconnectAttempts = 5;\n            \n            function checkServerHealth() {\n                return fetch('/health', { \n                    method: 'GET',\n                    cache: 'no-cache'\n                })\n                .then(response => response.ok)\n                .catch(() => false);\n            }\n            \n            function waitForServerAndReload() {\n                let attempts = 0;\n                const maxAttempts = 30; // 30 seconds max wait\n                \n                function tryReload() {\n                    attempts++;\n                    checkServerHealth().then(isHealthy => {\n                        if (isHealthy) {\n                            console.log('Server is ready, reloading page...');\n                            window.location.reload();\n                        } else if (attempts < maxAttempts) {\n                            // Server not ready yet, try again in 500ms\n                            setTimeout(tryReload, 500);\n                        } else {\n                            console.log('Server took too long to restart, reloading anyway...');\n                            window.location.reload();\n                        }\n                    });\n                }\n                \n                // Start checking immediately\n                tryReload();\n            }\n            \n            function connectToLiveReload() {\n                eventSource = new EventSource('/live-reload');\n                \n                eventSource.onopen = function() {\n                    console.log('Live reload connected');\n                    reconnectAttempts = 0;\n                };\n                \n                eventSource.onmessage = function(event) {\n                    if (event.data === 'connected') {\n                        console.log('Live reload ready');\n                    } else if (event.data === 'heartbeat') {\n                        // Just a heartbeat, do nothing\n                    }\n                };\n                \n                eventSource.onerror = function() {\n                    console.log('Live reload connection lost, waiting for server restart...');\n                    eventSource.close();\n                    \n                    // When the connection drops, it means the server restarted\n                    // Wait for the server to be healthy before reloading\n                    waitForServerAndReload();\n                };\n            }\n            \n            // Start the connection\n            connectToLiveReload();\n        }\n    </script></head><body class=\"min-h-screen bg-base-100 text-base-content flex flex-col\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Navbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main class=\"flex-1\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
