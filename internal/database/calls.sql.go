// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: calls.sql

package database

import (
	"context"
	"database/sql"
)

const completeCall = `-- name: CompleteCall :one
UPDATE calls
SET status = 'completed', completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at
`

func (q *Queries) CompleteCall(ctx context.Context, id int64) (Call, error) {
	row := q.db.QueryRowContext(ctx, completeCall, id)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.RecipientContext,
		&i.Objective,
		&i.BackgroundContext,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const createCall = `-- name: CreateCall :one
INSERT INTO calls (user_id, phone_number, recipient_context, objective, background_context)
VALUES (?, ?, ?, ?, ?)
RETURNING id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at
`

type CreateCallParams struct {
	UserID            int64          `json:"user_id"`
	PhoneNumber       string         `json:"phone_number"`
	RecipientContext  sql.NullString `json:"recipient_context"`
	Objective         string         `json:"objective"`
	BackgroundContext sql.NullString `json:"background_context"`
}

func (q *Queries) CreateCall(ctx context.Context, arg CreateCallParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, createCall,
		arg.UserID,
		arg.PhoneNumber,
		arg.RecipientContext,
		arg.Objective,
		arg.BackgroundContext,
	)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.RecipientContext,
		&i.Objective,
		&i.BackgroundContext,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteCall = `-- name: DeleteCall :exec
DELETE FROM calls
WHERE id = ?
`

func (q *Queries) DeleteCall(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCall, id)
	return err
}

const getCall = `-- name: GetCall :one
SELECT id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at FROM calls
WHERE id = ?
`

func (q *Queries) GetCall(ctx context.Context, id int64) (Call, error) {
	row := q.db.QueryRowContext(ctx, getCall, id)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.RecipientContext,
		&i.Objective,
		&i.BackgroundContext,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listCallsByStatus = `-- name: ListCallsByStatus :many
SELECT id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at FROM calls
WHERE status = ?
ORDER BY created_at DESC
`

func (q *Queries) ListCallsByStatus(ctx context.Context, status sql.NullString) ([]Call, error) {
	rows, err := q.db.QueryContext(ctx, listCallsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Call{}
	for rows.Next() {
		var i Call
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PhoneNumber,
			&i.RecipientContext,
			&i.Objective,
			&i.BackgroundContext,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCallsByUser = `-- name: ListCallsByUser :many
SELECT id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at FROM calls
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListCallsByUser(ctx context.Context, userID int64) ([]Call, error) {
	rows, err := q.db.QueryContext(ctx, listCallsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Call{}
	for rows.Next() {
		var i Call
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PhoneNumber,
			&i.RecipientContext,
			&i.Objective,
			&i.BackgroundContext,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCallStatus = `-- name: UpdateCallStatus :one
UPDATE calls
SET status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, phone_number, recipient_context, objective, background_context, status, created_at, updated_at, completed_at
`

type UpdateCallStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdateCallStatus(ctx context.Context, arg UpdateCallStatusParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, updateCallStatus, arg.Status, arg.ID)
	var i Call
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.RecipientContext,
		&i.Objective,
		&i.BackgroundContext,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
